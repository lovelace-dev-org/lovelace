# Generated by Django 4.1 on 2024-01-22 12:43

import courses.models
from django.conf import settings
import django.contrib.postgres.fields
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import utils.files


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Calendar",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200,
                        unique=True,
                        verbose_name="Name for reference in content",
                    ),
                ),
                (
                    "allow_multiple",
                    models.BooleanField(
                        default=False, verbose_name="Allow multiple reservation"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalendarDate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_name",
                    models.CharField(max_length=200, verbose_name="Name of the event"),
                ),
                (
                    "event_name_en",
                    models.CharField(
                        max_length=200, null=True, verbose_name="Name of the event"
                    ),
                ),
                (
                    "event_name_fi",
                    models.CharField(
                        max_length=200, null=True, verbose_name="Name of the event"
                    ),
                ),
                (
                    "event_description",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "event_description_en",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "event_description_fi",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                ("start_time", models.DateTimeField(verbose_name="Starts at")),
                ("end_time", models.DateTimeField(verbose_name="Ends at")),
                (
                    "reservable_slots",
                    models.IntegerField(verbose_name="Amount of reservable slots"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CalendarReservation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CheckboxExerciseAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField(default=False)),
                ("ordinal", models.PositiveIntegerField(null=True)),
                ("answer", models.TextField()),
                ("answer_en", models.TextField(null=True)),
                ("answer_fi", models.TextField(null=True)),
                ("hint", models.TextField(blank=True)),
                ("hint_en", models.TextField(blank=True, null=True)),
                ("hint_fi", models.TextField(blank=True, null=True)),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
                (
                    "comment_en",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
                (
                    "comment_fi",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CodeInputExerciseAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="CodeReplaceExerciseAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer", models.TextField()),
                ("replace_file", models.TextField()),
                ("replace_line", models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="CodeReplaceExerciseReplacement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("replacement", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="ContentGraph",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "compulsory",
                    models.BooleanField(
                        default=False,
                        verbose_name="Must be answered correctly before proceeding to next exercise",
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="The due date for completing this exercise",
                    ),
                ),
                (
                    "late_rule",
                    models.CharField(
                        blank=True,
                        help_text="Write a mathematical formula. Four placeholders are available.\\n{q} is obtained score as quotient of max points.\\n{p} is obtained raw points\\n{m} is the task's max points\\n{d} is the amount of days since deadline",
                        max_length=50,
                        null=True,
                        verbose_name="Score reduction formula to use for late submissions",
                    ),
                ),
                (
                    "score_weight",
                    models.DecimalField(
                        decimal_places=2,
                        default=1,
                        max_digits=5,
                        verbose_name="Weight multiplier to use in scoring for tasks on this page",
                    ),
                ),
                (
                    "scoring_group",
                    models.CharField(
                        blank=True,
                        help_text="Scoring group identifier, used for binding together mutually exclusive pages.",
                        max_length=32,
                    ),
                ),
                (
                    "publish_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="When does this exercise become available",
                    ),
                ),
                (
                    "require_enroll",
                    models.BooleanField(
                        default=False,
                        verbose_name="Content can only be viewed by enrolled users",
                    ),
                ),
                (
                    "scored",
                    models.BooleanField(
                        default=True, verbose_name="Does this exercise affect scoring"
                    ),
                ),
                ("ordinal_number", models.PositiveSmallIntegerField()),
                (
                    "visible",
                    models.BooleanField(
                        default=True, verbose_name="Is this content visible to students"
                    ),
                ),
                (
                    "revision",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="The specific revision of the content",
                    ),
                ),
                (
                    "evergreen",
                    models.BooleanField(
                        default=False, verbose_name="This content should not be frozen"
                    ),
                ),
            ],
            options={
                "verbose_name": "content to course link",
                "verbose_name_plural": "content to course links",
            },
        ),
        migrations.CreateModel(
            name="ContentPage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The full name of this page", max_length=255
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        help_text="The full name of this page",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "name_fi",
                    models.CharField(
                        help_text="The full name of this page",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(allow_unicode=True, max_length=255, unique=True),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, default="", verbose_name="Page content body"
                    ),
                ),
                (
                    "content_en",
                    models.TextField(
                        blank=True,
                        default="",
                        null=True,
                        verbose_name="Page content body",
                    ),
                ),
                (
                    "content_fi",
                    models.TextField(
                        blank=True,
                        default="",
                        null=True,
                        verbose_name="Page content body",
                    ),
                ),
                (
                    "default_points",
                    models.IntegerField(
                        default=1,
                        help_text="The default points a user can gain by finishing this exercise correctly",
                    ),
                ),
                (
                    "access_count",
                    models.PositiveIntegerField(default=0, editable=False),
                ),
                (
                    "tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=32),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "evaluation_group",
                    models.CharField(
                        blank=True,
                        help_text="Evaluation group identifier for binding together mutually exclusive tasks.",
                        max_length=32,
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("LECTURE", "Lecture"),
                            ("TEXTFIELD_EXERCISE", "Textfield exercise"),
                            ("MULTIPLE_CHOICE_EXERCISE", "Multiple choice exercise"),
                            ("CHECKBOX_EXERCISE", "Checkbox exercise"),
                            ("FILE_UPLOAD_EXERCISE", "File upload exercise"),
                            (
                                "REPEATED_TEMPLATE_EXERCISE",
                                "Repeated template exercise",
                            ),
                            ("ROUTINE_EXERCISE", "Routine exercise"),
                            ("MULTIPLE_QUESTION_EXAM", "Multiple question exam"),
                        ],
                        default="LECTURE",
                        max_length=28,
                    ),
                ),
                ("question", models.TextField(blank=True, default="")),
                ("question_en", models.TextField(blank=True, default="", null=True)),
                ("question_fi", models.TextField(blank=True, default="", null=True)),
                (
                    "manually_evaluated",
                    models.BooleanField(
                        default=False, verbose_name="This exercise is evaluated by hand"
                    ),
                ),
                (
                    "delayed_evaluation",
                    models.BooleanField(
                        default=False,
                        verbose_name="This exercise is not immediately evaluated",
                    ),
                ),
                (
                    "answer_limit",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Limit number of allowed attempts to",
                    ),
                ),
                (
                    "group_submission",
                    models.BooleanField(
                        default=False,
                        verbose_name="Answers can be submitted as a group",
                    ),
                ),
                (
                    "ask_collaborators",
                    models.BooleanField(
                        default=False,
                        verbose_name="Ask the student to list collaborators",
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_fi", models.CharField(max_length=255, null=True)),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="Course code, for e.g. universities",
                        max_length=64,
                        null=True,
                        verbose_name="Course code",
                    ),
                ),
                (
                    "credits",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="How many credits does the course yield on completion, for e.g. universities",
                        max_digits=6,
                        null=True,
                        verbose_name="Course credits",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_fi", models.TextField(blank=True, null=True)),
                (
                    "slug",
                    models.SlugField(allow_unicode=True, max_length=255, unique=True),
                ),
                (
                    "staff_course",
                    models.BooleanField(
                        default=False,
                        help_text="Staff only courses will not be shown on the front page unless the user is staff",
                        verbose_name="Staff only course",
                    ),
                ),
                (
                    "main_responsible",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        to="courses.course",
                        verbose_name="Prerequisite courses",
                    ),
                ),
                (
                    "staff_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="auth.group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CourseEnrollment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("enrollment_date", models.DateTimeField(auto_now_add=True)),
                ("application_note", models.TextField(blank=True)),
                (
                    "enrollment_state",
                    models.CharField(
                        choices=[
                            ("WAITING", "Waiting"),
                            ("PROCESSING", "Processing"),
                            ("ACCEPTED", "Accepted"),
                            ("EXPELLED", "Expelled"),
                            ("DENIED", "Denied"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("COMPLETED", "Completed"),
                            ("TRANSFERED", "Transfered"),
                        ],
                        default="WAITING",
                        max_length=11,
                    ),
                ),
                ("enrollment_note", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="CourseInstance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("name_en", models.CharField(max_length=255, null=True, unique=True)),
                ("name_fi", models.CharField(max_length=255, null=True, unique=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("email_en", models.EmailField(blank=True, max_length=254, null=True)),
                ("email_fi", models.EmailField(blank=True, max_length=254, null=True)),
                ("slug", models.SlugField(allow_unicode=True, max_length=255)),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time on which the course begins",
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date and time on which the course ends",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=False, verbose_name="Force this instance active"
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        blank=True,
                        max_length=256,
                        verbose_name="Tags for this instance (comma-separated)",
                    ),
                ),
                (
                    "notes_en",
                    models.CharField(
                        blank=True,
                        max_length=256,
                        null=True,
                        verbose_name="Tags for this instance (comma-separated)",
                    ),
                ),
                (
                    "notes_fi",
                    models.CharField(
                        blank=True,
                        max_length=256,
                        null=True,
                        verbose_name="Tags for this instance (comma-separated)",
                    ),
                ),
                (
                    "manual_accept",
                    models.BooleanField(
                        default=False,
                        verbose_name="Teachers accept enrollments manually",
                    ),
                ),
                (
                    "frozen",
                    models.BooleanField(
                        default=False, verbose_name="Freeze this instance"
                    ),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=True, verbose_name="Is this course visible to students"
                    ),
                ),
                ("content_license", models.CharField(blank=True, max_length=255)),
                ("license_url", models.CharField(blank=True, max_length=255)),
                (
                    "primary",
                    models.BooleanField(
                        default=False, verbose_name="Set this instance as primary."
                    ),
                ),
                (
                    "welcome_message",
                    models.TextField(
                        blank=True,
                        verbose_name="Automatic welcome message for accepted enrollments",
                    ),
                ),
                (
                    "welcome_message_en",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Automatic welcome message for accepted enrollments",
                    ),
                ),
                (
                    "welcome_message_fi",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Automatic welcome message for accepted enrollments",
                    ),
                ),
                (
                    "max_group_size",
                    models.PositiveSmallIntegerField(blank=True, null=True),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.course"
                    ),
                ),
                (
                    "enrolled_users",
                    models.ManyToManyField(
                        blank=True,
                        through="courses.CourseEnrollment",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CourseMedia",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200,
                        unique=True,
                        verbose_name="Unique name identifier",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Evaluation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField(default=False)),
                (
                    "points",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("max_points", models.IntegerField(default=1)),
                (
                    "evaluation_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="When was the answer evaluated"
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True, verbose_name="Feedback given by a teacher"
                    ),
                ),
                (
                    "test_results",
                    models.TextField(blank=True, verbose_name="Test results in JSON"),
                ),
                (
                    "evaluator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Who evaluated the answer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FileExerciseSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "allowed_filenames",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, max_length=32),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("max_file_count", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "answer_mode",
                    models.CharField(
                        choices=[("FILE", "Upload as file"), ("TEXT", "From textbox")],
                        default="FILE",
                        max_length=12,
                    ),
                ),
                (
                    "answer_filename",
                    models.CharField(
                        blank=True,
                        help_text="Required for tasks where answer mode is TEXT. For FILE, submitted file is renamed to this name unless multiple files are returned. For multiple files this does nothing.",
                        max_length=32,
                        null=True,
                        verbose_name="Filename to use for the answer",
                    ),
                ),
                (
                    "answer_filename_en",
                    models.CharField(
                        blank=True,
                        help_text="Required for tasks where answer mode is TEXT. For FILE, submitted file is renamed to this name unless multiple files are returned. For multiple files this does nothing.",
                        max_length=32,
                        null=True,
                        verbose_name="Filename to use for the answer",
                    ),
                ),
                (
                    "answer_filename_fi",
                    models.CharField(
                        blank=True,
                        help_text="Required for tasks where answer mode is TEXT. For FILE, submitted file is renamed to this name unless multiple files are returned. For multiple files this does nothing.",
                        max_length=32,
                        null=True,
                        verbose_name="Filename to use for the answer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FileExerciseTest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Test name")),
            ],
            options={
                "verbose_name": "file exercise test",
            },
        ),
        migrations.CreateModel(
            name="FileExerciseTestCommand",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("command_line", models.CharField(max_length=255)),
                ("command_line_en", models.CharField(max_length=255, null=True)),
                ("command_line_fi", models.CharField(max_length=255, null=True)),
                (
                    "significant_stdout",
                    models.BooleanField(
                        default=False,
                        help_text="Determines whether the standard output generated by this command is compared to the one generated by running this command with the reference files.",
                        verbose_name="Compare the generated stdout to reference",
                    ),
                ),
                (
                    "significant_stderr",
                    models.BooleanField(
                        default=False,
                        help_text="Determines whether the standard errors generated by this command are compared to those generated by running this command with the reference files.",
                        verbose_name="Compare the generated stderr to reference",
                    ),
                ),
                (
                    "json_output",
                    models.BooleanField(
                        default=False,
                        help_text="The checker provides test results as JSON",
                        verbose_name="Test results as JSON",
                    ),
                ),
                (
                    "timeout",
                    models.DurationField(
                        default=courses.models.default_fue_timeout,
                        help_text="How long is the command allowed to run before termination?",
                    ),
                ),
                (
                    "signal",
                    models.CharField(
                        choices=[
                            ("None", "Don't send any signals"),
                            ("SIGINT", "Interrupt signal (same as Ctrl-C)"),
                            ("SIGTERM", "Terminate signal"),
                        ],
                        default="None",
                        help_text="Which POSIX signal shall be fired at the program?",
                        max_length=8,
                    ),
                ),
                (
                    "input_text",
                    models.TextField(
                        blank=True,
                        help_text="What input shall be entered to the program's stdin upon execution?",
                        verbose_name="Input fed to the command through STDIN",
                    ),
                ),
                (
                    "input_text_en",
                    models.TextField(
                        blank=True,
                        help_text="What input shall be entered to the program's stdin upon execution?",
                        null=True,
                        verbose_name="Input fed to the command through STDIN",
                    ),
                ),
                (
                    "input_text_fi",
                    models.TextField(
                        blank=True,
                        help_text="What input shall be entered to the program's stdin upon execution?",
                        null=True,
                        verbose_name="Input fed to the command through STDIN",
                    ),
                ),
                (
                    "return_value",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Expected return value"
                    ),
                ),
                ("ordinal_number", models.PositiveSmallIntegerField()),
            ],
            options={
                "verbose_name": "command to run for the test",
                "verbose_name_plural": "commands to run for the test",
                "ordering": ["ordinal_number"],
            },
        ),
        migrations.CreateModel(
            name="FileUploadExerciseReturnFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "fileinfo",
                    models.FileField(
                        max_length=255,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_answerfile_path,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IncludeFileSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, verbose_name="File name during test"
                    ),
                ),
                (
                    "name_en",
                    models.CharField(
                        max_length=255, null=True, verbose_name="File name during test"
                    ),
                ),
                (
                    "name_fi",
                    models.CharField(
                        max_length=255, null=True, verbose_name="File name during test"
                    ),
                ),
                (
                    "purpose",
                    models.CharField(
                        choices=[
                            (
                                "Files written into the test directory for reading",
                                (("INPUT", "Input file"),),
                            ),
                            (
                                "Files the program is expected to generate",
                                (("OUTPUT", "Expected output file"),),
                            ),
                            (
                                "Executable files",
                                (
                                    ("LIBRARY", "Library file"),
                                    ("REFERENCE", "Reference implementation"),
                                    ("INPUTGEN", "Input generator"),
                                    ("WRAPPER", "Wrapper for uploaded code"),
                                    ("TEST", "Unit test"),
                                ),
                            ),
                        ],
                        default="REFERENCE",
                        max_length=10,
                        verbose_name="Used as",
                    ),
                ),
                (
                    "chown_settings",
                    models.CharField(
                        choices=[
                            ("OWNED", "Owned by the tested program"),
                            ("NOT_OWNED", "Not owned by the tested program"),
                        ],
                        default="OWNED",
                        max_length=10,
                        verbose_name="File user ownership",
                    ),
                ),
                (
                    "chgrp_settings",
                    models.CharField(
                        choices=[
                            ("OWNED", "Owned by the tested program"),
                            ("NOT_OWNED", "Not owned by the tested program"),
                        ],
                        default="OWNED",
                        max_length=10,
                        verbose_name="File group ownership",
                    ),
                ),
                (
                    "chmod_settings",
                    models.CharField(
                        default="rw-rw-rw-",
                        max_length=10,
                        verbose_name="File access mode",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InstanceIncludeFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "default_name",
                    models.CharField(max_length=255, verbose_name="Default name"),
                ),
                (
                    "default_name_en",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Default name"
                    ),
                ),
                (
                    "default_name_fi",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Default name"
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_fi", models.TextField(blank=True, null=True)),
                (
                    "fileinfo",
                    models.FileField(
                        max_length=255,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_instancefile_path,
                    ),
                ),
                (
                    "fileinfo_en",
                    models.FileField(
                        max_length=255,
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_instancefile_path,
                    ),
                ),
                (
                    "fileinfo_fi",
                    models.FileField(
                        max_length=255,
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_instancefile_path,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.course"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MultipleChoiceExerciseAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField(default=False)),
                ("ordinal", models.PositiveIntegerField(null=True)),
                ("answer", models.TextField()),
                ("answer_en", models.TextField(null=True)),
                ("answer_fi", models.TextField(null=True)),
                ("hint", models.TextField(blank=True)),
                ("hint_en", models.TextField(blank=True, null=True)),
                ("hint_fi", models.TextField(blank=True, null=True)),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
                (
                    "comment_en",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
                (
                    "comment_fi",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon selection of this answer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseBackendCommand",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("command", models.TextField()),
                ("command_en", models.TextField(null=True)),
                ("command_fi", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseBackendFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("filename", models.CharField(blank=True, max_length=255)),
                (
                    "fileinfo",
                    models.FileField(
                        max_length=255,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_testfile_path,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseSession",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("revision", models.PositiveIntegerField()),
                ("language_code", models.CharField(max_length=7)),
                ("generated_json", models.JSONField()),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseSessionInstance",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ordinal_number", models.PositiveSmallIntegerField()),
                (
                    "variables",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "values",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.repeatedtemplateexercisesession",
                    ),
                ),
            ],
            options={
                "ordering": ("ordinal_number",),
            },
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseTemplate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=64)),
                ("title_en", models.CharField(max_length=64, null=True)),
                ("title_fi", models.CharField(max_length=64, null=True)),
                ("content_string", models.TextField()),
                ("content_string_en", models.TextField(null=True)),
                ("content_string_fi", models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Term",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Term")),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
                (
                    "name_fi",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
                ("description", models.TextField()),
                ("description_en", models.TextField(null=True)),
                ("description_fi", models.TextField(null=True)),
                (
                    "course",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.course",
                        verbose_name="Course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Term")),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
                (
                    "name_fi",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TextfieldExerciseAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField(default=False)),
                ("regexp", models.BooleanField(default=True)),
                ("answer", models.TextField()),
                ("answer_en", models.TextField(null=True)),
                ("answer_fi", models.TextField(null=True)),
                ("hint", models.TextField(blank=True)),
                ("hint_en", models.TextField(blank=True, null=True)),
                ("hint_fi", models.TextField(blank=True, null=True)),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        verbose_name="Extra comment given upon entering a matching answer",
                    ),
                ),
                (
                    "comment_en",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon entering a matching answer",
                    ),
                ),
                (
                    "comment_fi",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Extra comment given upon entering a matching answer",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("revision", models.PositiveIntegerField()),
                ("language_code", models.CharField(max_length=7)),
                (
                    "answer_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        verbose_name="Date and time of when the user answered this exercise",
                    ),
                ),
                ("answerer_ip", models.GenericIPAddressField()),
                ("task_id", models.CharField(blank=True, max_length=36, null=True)),
                (
                    "collaborators",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Which users was this exercise answered with",
                    ),
                ),
                (
                    "checked",
                    models.BooleanField(
                        default=False, verbose_name="This answer has been checked"
                    ),
                ),
                (
                    "draft",
                    models.BooleanField(
                        default=False, verbose_name="This answer is a draft"
                    ),
                ),
                (
                    "evaluation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.evaluation",
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.courseinstance",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "coursemedia_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.coursemedia",
                    ),
                ),
                (
                    "date_uploaded",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date uploaded"
                    ),
                ),
                ("typeinfo", models.CharField(max_length=200)),
                (
                    "fileinfo",
                    models.FileField(
                        max_length=255, upload_to=utils.files.get_file_upload_path
                    ),
                ),
                (
                    "fileinfo_en",
                    models.FileField(
                        max_length=255,
                        null=True,
                        upload_to=utils.files.get_file_upload_path,
                    ),
                ),
                (
                    "fileinfo_fi",
                    models.FileField(
                        max_length=255,
                        null=True,
                        upload_to=utils.files.get_file_upload_path,
                    ),
                ),
                (
                    "download_as",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Default name for the download dialog",
                    ),
                ),
                (
                    "download_as_en",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Default name for the download dialog",
                    ),
                ),
                (
                    "download_as_fi",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        null=True,
                        verbose_name="Default name for the download dialog",
                    ),
                ),
            ],
            bases=("courses.coursemedia",),
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "coursemedia_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.coursemedia",
                    ),
                ),
                (
                    "date_uploaded",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="date uploaded"
                    ),
                ),
                ("description", models.CharField(max_length=500)),
                ("description_en", models.CharField(max_length=500, null=True)),
                ("description_fi", models.CharField(max_length=500, null=True)),
                (
                    "fileinfo",
                    models.ImageField(upload_to=utils.files.get_image_upload_path),
                ),
                (
                    "fileinfo_en",
                    models.ImageField(
                        null=True, upload_to=utils.files.get_image_upload_path
                    ),
                ),
                (
                    "fileinfo_fi",
                    models.ImageField(
                        null=True, upload_to=utils.files.get_image_upload_path
                    ),
                ),
            ],
            bases=("courses.coursemedia",),
        ),
        migrations.CreateModel(
            name="UserCheckboxExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="UserCodeReplaceExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
                ("given_answer", models.TextField()),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="UserFileUploadExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="UserMultipleChoiceExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="UserRepeatedTemplateExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="UserTextfieldExerciseAnswer",
            fields=[
                (
                    "useranswer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.useranswer",
                    ),
                ),
                ("given_answer", models.TextField()),
            ],
            bases=("courses.useranswer",),
        ),
        migrations.CreateModel(
            name="VideoLink",
            fields=[
                (
                    "coursemedia_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="courses.coursemedia",
                    ),
                ),
                ("link", models.URLField()),
                ("link_en", models.URLField(null=True)),
                ("link_fi", models.URLField(null=True)),
                ("description", models.CharField(max_length=500)),
                ("description_en", models.CharField(max_length=500, null=True)),
                ("description_fi", models.CharField(max_length=500, null=True)),
            ],
            bases=("courses.coursemedia",),
        ),
        migrations.CreateModel(
            name="UserTaskCompletion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "points",
                    models.DecimalField(decimal_places=5, default=0, max_digits=8),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("unanswered", "The task has not been answered yet"),
                            ("correct", "The task has been answered correctly"),
                            ("incorrect", "The task has not been answered correctly"),
                            (
                                "credited",
                                "The task has been credited by completing another task",
                            ),
                            (
                                "submitted",
                                "An answer has been submitted, awaiting assessment",
                            ),
                            ("ongoing", "The task has been started"),
                        ],
                        max_length=16,
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.contentpage",
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserRepeatedTemplateInstanceAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("given_answer", models.TextField(blank=True)),
                ("correct", models.BooleanField(default=False)),
                (
                    "session_instance",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.repeatedtemplateexercisesessioninstance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "student_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Student number"
                    ),
                ),
                (
                    "study_program",
                    models.CharField(
                        blank=True,
                        max_length=80,
                        null=True,
                        verbose_name="Study program",
                    ),
                ),
                (
                    "enrollment_year",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Year of enrollment"
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermToInstanceLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "revision",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Revision to display"
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                        verbose_name="Course instance",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT, to="courses.term"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermTab",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=100, verbose_name="Title of this tab"),
                ),
                (
                    "title_en",
                    models.CharField(
                        max_length=100, null=True, verbose_name="Title of this tab"
                    ),
                ),
                (
                    "title_fi",
                    models.CharField(
                        max_length=100, null=True, verbose_name="Title of this tab"
                    ),
                ),
                ("description", models.TextField()),
                ("description_en", models.TextField(null=True)),
                ("description_fi", models.TextField(null=True)),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.term"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.CharField(max_length=300, verbose_name="URL")),
                (
                    "url_en",
                    models.CharField(max_length=300, null=True, verbose_name="URL"),
                ),
                (
                    "url_fi",
                    models.CharField(max_length=300, null=True, verbose_name="URL"),
                ),
                (
                    "link_text",
                    models.CharField(max_length=80, verbose_name="Link text"),
                ),
                (
                    "link_text_en",
                    models.CharField(
                        max_length=80, null=True, verbose_name="Link text"
                    ),
                ),
                (
                    "link_text_fi",
                    models.CharField(
                        max_length=80, null=True, verbose_name="Link text"
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.term"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TermAlias",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Term")),
                (
                    "name_en",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
                (
                    "name_fi",
                    models.CharField(max_length=200, null=True, verbose_name="Term"),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="courses.term"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="term",
            name="tags",
            field=models.ManyToManyField(blank=True, to="courses.termtag"),
        ),
        migrations.CreateModel(
            name="StudentGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, verbose_name="Ryhmän nimi")),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                    ),
                ),
                ("members", models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                (
                    "supervisor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_group",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SavedMessage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("handle", models.CharField(max_length=127, verbose_name="Save as")),
                ("title", models.CharField(blank=True, default="", max_length=255)),
                (
                    "title_en",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                (
                    "title_fi",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                ("content", models.TextField(blank=True, default="")),
                ("content_en", models.TextField(blank=True, default="", null=True)),
                ("content_fi", models.TextField(blank=True, default="", null=True)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepeatedTemplateExerciseSessionInstanceAnswer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField()),
                ("regexp", models.BooleanField()),
                ("answer", models.TextField()),
                ("hint", models.TextField(blank=True)),
                ("comment", models.TextField(blank=True)),
                (
                    "session_instance",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.repeatedtemplateexercisesessioninstance",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="repeatedtemplateexercisesessioninstance",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="courses.repeatedtemplateexercisetemplate",
            ),
        ),
        migrations.CreateModel(
            name="InstanceIncludeFileToInstanceLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("revision", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "include_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.instanceincludefile",
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InstanceIncludeFileToExerciseLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.contentpage",
                    ),
                ),
                (
                    "file_settings",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.includefilesettings",
                    ),
                ),
                (
                    "include_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.instanceincludefile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="instanceincludefile",
            name="exercises",
            field=models.ManyToManyField(
                blank=True,
                through="courses.InstanceIncludeFileToExerciseLink",
                to="courses.contentpage",
            ),
        ),
        migrations.CreateModel(
            name="Hint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("hint", models.TextField(verbose_name="hint text")),
                ("hint_en", models.TextField(null=True, verbose_name="hint text")),
                ("hint_fi", models.TextField(null=True, verbose_name="hint text")),
                (
                    "tries_to_unlock",
                    models.IntegerField(
                        default=0,
                        help_text="Use 0 to show the hint immediately – before any answer attempts.",
                        verbose_name="number of tries to unlock this hint",
                    ),
                ),
                (
                    "exercise",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.contentpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "configurable hint",
            },
        ),
        migrations.CreateModel(
            name="GroupInvitation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.studentgroup",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_invitation",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GradeThreshold",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "threshold",
                    models.PositiveSmallIntegerField(verbose_name="Score threshold"),
                ),
                ("grade", models.CharField(max_length=4)),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FileExerciseTestStage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(default="stage", max_length=64)),
                (
                    "name_en",
                    models.CharField(default="stage", max_length=64, null=True),
                ),
                (
                    "name_fi",
                    models.CharField(default="stage", max_length=64, null=True),
                ),
                ("ordinal_number", models.PositiveSmallIntegerField()),
                (
                    "depends_on",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.fileexerciseteststage",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.fileexercisetest",
                    ),
                ),
            ],
            options={
                "ordering": ["ordinal_number"],
            },
        ),
        migrations.CreateModel(
            name="FileExerciseTestIncludeFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "default_name",
                    models.CharField(max_length=255, verbose_name="Default name"),
                ),
                (
                    "default_name_en",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Default name"
                    ),
                ),
                (
                    "default_name_fi",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Default name"
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_fi", models.TextField(blank=True, null=True)),
                (
                    "fileinfo",
                    models.FileField(
                        max_length=255,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_testfile_path,
                    ),
                ),
                (
                    "fileinfo_en",
                    models.FileField(
                        max_length=255,
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_testfile_path,
                    ),
                ),
                (
                    "fileinfo_fi",
                    models.FileField(
                        max_length=255,
                        null=True,
                        storage=django.core.files.storage.FileSystemStorage(
                            location="/opt/lovelace/upload"
                        ),
                        upload_to=utils.files.get_testfile_path,
                    ),
                ),
                (
                    "file_settings",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.includefilesettings",
                    ),
                ),
            ],
            options={
                "verbose_name": "included file",
            },
        ),
        migrations.CreateModel(
            name="FileExerciseTestExpectedOutput",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("correct", models.BooleanField(default=False)),
                ("regexp", models.BooleanField(default=False)),
                ("expected_answer", models.TextField(blank=True)),
                ("hint", models.TextField(blank=True)),
                (
                    "output_type",
                    models.CharField(
                        choices=[
                            ("STDOUT", "Standard output (stdout)"),
                            ("STDERR", "Standard error (stderr)"),
                        ],
                        default="STDOUT",
                        max_length=7,
                    ),
                ),
                (
                    "command",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.fileexercisetestcommand",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="fileexercisetestcommand",
            name="stage",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="courses.fileexerciseteststage",
            ),
        ),
        migrations.AddField(
            model_name="fileexercisetest",
            name="required_files",
            field=models.ManyToManyField(
                blank=True,
                to="courses.fileexercisetestincludefile",
                verbose_name="files required by this test",
            ),
        ),
        migrations.AddField(
            model_name="fileexercisetest",
            name="required_instance_files",
            field=models.ManyToManyField(
                blank=True,
                to="courses.instanceincludefile",
                verbose_name="instance files required by this test",
            ),
        ),
        migrations.CreateModel(
            name="EmbeddedLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("revision", models.PositiveIntegerField(blank=True, null=True)),
                ("ordinal_number", models.PositiveSmallIntegerField()),
                (
                    "embedded_page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="emb_embedded",
                        to="courses.contentpage",
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emb_parent",
                        to="courses.contentpage",
                    ),
                ),
            ],
            options={
                "ordering": ["ordinal_number"],
            },
        ),
        migrations.CreateModel(
            name="DeadlineExemption",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("new_deadline", models.DateTimeField(null=True)),
                (
                    "contentgraph",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.contentgraph",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CourseMediaLink",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "revision",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Revision to display"
                    ),
                ),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.courseinstance",
                        verbose_name="Course instance",
                    ),
                ),
                (
                    "media",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="courses.coursemedia",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.contentpage",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="courseenrollment",
            name="instance",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="courses.courseinstance"
            ),
        ),
        migrations.AddField(
            model_name="courseenrollment",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="contentpage",
            name="embedded_pages",
            field=models.ManyToManyField(
                blank=True, through="courses.EmbeddedLink", to="courses.contentpage"
            ),
        ),
    ]
